{% use 'form_div_layout.html.twig' with datetime_widget as base_datetime_widget,
                                        date_widget as base_date_widget,
                                        time_widget as base_time_widget %}

{#} Widget {#}
{% block select2_widget %}
{% spaceless %}
<div class="select2-wrapper">
{% if ajax or tags is defined %}
<input type="hidden" id="{{ id }}" name="{{ full_name }}" value="{{ value }}" />
<input type="hidden" id="{{ id }}__label" value="{{ choices_selected|json_encode }}" />
{% else %}
{{ block('choice_widget') }}
{% endif %}
</div>
{% asset_javascript %}
    <script type="text/javascript">
    $( '#{{ id }}' ).select2( {
        {% if minimum_input_length is not null %}minimumInputLength: {{ minimum_input_length }},{% endif %}
        {% if minimum_results_for_search is not null %}minimumResultsForSearch: {{ minimum_results_for_search }},{% endif %}
        {% if maximum_selection_size is not null %}maximumSelectionSize: {{ maximum_selection_size }},{% endif %}
        placeholder: {{ placeholder|default('select2.placeholder')|trans({}, translation_domain)|raw }},
        {% if select_separator is not null %}separator: {{ select_separator|raw }},{% endif %}
        allowClear: {{ allow_clear|raw }},
        {% if ajax or tags is defined %}multiple: {% if multiple|default(false) %}true{% else %}false{% endif %},{% endif %}
        {% if close_on_select is not null %}closeOnSelect: {% if close_on_select %}true{% else %}false{% endif %},{% endif %}
        {% if open_on_enter is not null %}openOnEnter: {% if open_on_enter %}true{% else %}false{% endif %},{% endif %}
        {% if select_id is not null %}id: {{ select_id|raw }},{% endif %}
        {% if matcher is not null %}matcher: {{ matcher|raw }},{% endif %}
        {% if format_result is not null %}formatResult: {{ format_result|raw }},{% endif %}
        {% if format_result_css_class is not null %}formatResultCssClass: {{ format_result_css_class|raw }},{% endif %}
        formatNoMatches: {% if format_no_matches is not null %}{{ format_no_matches|raw }}{% else %}function () { return {{ 'select2.format_no_matches'|trans({}, translation_domain)|raw }}; }{% endif %},
        formatSearching: {% if format_searching is not null %}{{ format_searching|raw }}{% else %}function () { return {{ 'select2.format_searching'|trans({}, translation_domain)|raw }}; }{% endif %},
        formatInputTooShort: {% if format_input_too_short is not null %}{{ format_input_too_short|raw }}{% else %}function (input, min) { return {{ 'select2.format_input_too_short'|trans({}, translation_domain)|raw }}; }{% endif %},
        formatSelectionTooBig: {% if format_selection_too_big is not null %}{{ format_selection_too_big|raw }}{% else %}function (limit) { return {{ 'select2.format_selection_too_big'|trans({}, translation_domain)|raw }}; }{% endif %},
        formatLoadMore: {% if format_load_more is not null %}{{ format_load_more|raw }}{% else %}function (pageNumber) { return {{ 'select2.format_load_more'|trans({}, translation_domain)|raw }}; }{% endif %},
        {% if format_selection is not null %}formatSelection: {{ format_selection|raw }},{% endif %}
        {% if create_search_choice is not null %}createSearchChoice: {{ create_search_choice|raw }},{% elseif tags is defined %}createSearchChoice: function(term, data) {
            if ($(data).filter(function() {
                return this.text.localeCompare(term) === 0;
                }).length === 0) {
                return {
                    id: term,
                    text: term
                };
            }
        },{% endif %}
        {% if ajax or tags is defined %}{% if init_selection is not null %}initSelection: {{ init_selection|raw }},{% else %}initSelection: function (element, callback) {
            var selected = $.parseJSON($( '#{{ id }}__label' ).val());
            {% if multiple %}
            var items = [];
            var values = element.val().split(',');
            $(selected).each(function() {
                if (-1 < $.inArray(this.id+'', values)) {
                    items.push(this);
                }
            });
            callback(items);
            {% else %}
            $(selected).each(function() {
                if (this.id == element.val()) {
                    callback(this);
                    return;
                }
            });
            {% endif %}
        },{% endif %}
        {% endif %}
        {% if tokenizer is not null %}tokenizer: {{ tokenizer|raw }},{% endif %}
        {% if token_separators is not null %}tokenSeparators: {{ token_separators|raw }},{% endif %}
        {% if select_query is not null %}query: {{ select_query|raw }},{% endif %}
        {% if select_ajax is not null %}ajax: {{ select_ajax|raw }}{% elseif ajax %}ajax: {
            url: "{{ ajax_url|raw }}",
            dataType: 'json',
            quietMillis: {{ quiet_millis }},
            data: function (search, pageNumber) {
                var value = $( '#{{ id }}' ).prop( 'value' );
                return {
                    s: search,
                    pn: pageNumber,
                    ps: {{ page_size }},
                    ids : value,
                    ajax_id: "{% if ajax_id is defined and ajax_id != '' %}{{ ajax_id }}{% else %}{{ id }}"{% endif %}
                };
            },
            results: function (data, pageNumber) {
                var more = (pageNumber * {{ page_size }}) < data.length;
                return {results: data.results, more: more};
            }
        },{% endif %}
        {% if select_data is not null %}data: {{ select_data|json_encode|raw }},{% endif %}
        {% if tags is defined %}tags: {{ tags|json_encode|raw }},{% endif %}
        {% if container_css is not null %}containerCss: {{ container_css|raw }},{% endif %}
        {% if container_css_class is not null %}containerCssClass: {{ container_css_class|raw }},{% endif %}
        {% if dropdown_css is not null %}dropdownCss: {{ dropdown_css|raw }},{% endif %}
        {% if dropdown_css_class is not null %}dropdownCssClass: {{ dropdown_css_class|raw }},{% endif %}
        {% if escape_markup is not null %}escapeMarkup: {{ escape_markup|raw }},{% endif %}
        width: '{{ width }}'
    } ){% if ajax or tags is defined %}.change(function(event) {
        var $label = $( '#{{ id }}__label' );
        var lData = $.parseJSON($label.val());
        {% if multiple %}
        if (event.added) {
            lData.push(event.added);
        } else if (event.removed) {
            for (var i=0; i < lData.length;i++) {
                if ( lData[i].id == event.removed.id ) {
                     lData.splice(i, 1);
                 }
            }
        }
        {% else %}
        lData = [$(this).select2('data')];
        {% endif %}
        $label.val(JSON.stringify(lData));
    }){% endif %};
    </script>
{% endasset %}
{% endspaceless %}
{% endblock select2_widget %}

{% block choice_select2_widget %}
{{ block('select2_widget') }}
{% endblock choice_select2_widget %}

{% block language_select2_widget %}
{{ block('select2_widget') }}
{% endblock language_select2_widget %}

{% block country_select2_widget %}
{{ block('select2_widget') }}
{% endblock country_select2_widget %}

{% block timezone_select2_widget %}
{{ block('select2_widget') }}
{% endblock timezone_select2_widget %}

{% block locale_select2_widget %}
{{ block('select2_widget') }}
{% endblock locale_select2_widget %}

{% block entity_select2_widget %}
{{ block('select2_widget') }}
{% endblock entity_select2_widget %}

{% block collection_select2_widget %}
{{ block('select2_widget') }}
{% endblock collection_select2_widget %}


{% block datetime_widget_content %}
{% if not read_only %}
    {% asset_javascript %}
    <script type="text/javascript">
    $( '#{{ id }}' ).datetimepicker( {
        {% if 'false' == time_only or ('false' == show_timepicker and 'true' == time_only) %}
        closeText: "{{ 'datetime_jquery.closeText'|trans({}, translation_domain) }}",
        prevText: "{{ 'datetime_jquery.prevText'|trans({}, translation_domain) }}",
        nextText: "{{ 'datetime_jquery.nextText'|trans({}, translation_domain) }}",
        currentText: "{{ 'datetime_jquery.currentText'|trans({}, translation_domain) }}",
        monthNames: {{ 'datetime_jquery.monthNames'|trans({}, translation_domain)|raw }},
        monthNamesShort: {{ 'datetime_jquery.monthNamesShort'|trans({}, translation_domain)|raw }},
        dayNames: {{ 'datetime_jquery.dayNames'|trans({}, translation_domain)|raw }},
        dayNamesShort: {{ 'datetime_jquery.dayNamesShort'|trans({}, translation_domain)|raw }},
        dayNamesMin: {{ 'datetime_jquery.dayNamesMin'|trans({}, translation_domain)|raw }},
        weekHeader: "{{ 'datetime_jquery.weekHeader'|trans({}, translation_domain) }}",
        dateFormat: "{{ date_format }}",
        firstDay: {{ 'datetime_jquery.firstDay'|trans({}, translation_domain)|raw }},
        isRTL: {{ 'datetime_jquery.isRTL'|trans({}, translation_domain)|raw }},
        showMonthAfterYear: {{ 'datetime_jquery.showMonthAfterYear'|trans({}, translation_domain)|raw }},
        yearSuffix: "{{ 'datetime_jquery.yearSuffix'|trans({}, translation_domain) }}",
        {% endif %}

        {% if 'true' == show_timepicker %}
        timeOnlyTitle: "{{ 'datetime_jquery.timeOnlyTitle'|trans({}, translation_domain)|raw }}",
        timeText: "{{ 'datetime_jquery.timeText'|trans({}, translation_domain)|raw }}",
        hourText: "{{ 'datetime_jquery.hourText'|trans({}, translation_domain)|raw }}",
        minuteText: "{{ 'datetime_jquery.minuteText'|trans({}, translation_domain)|raw }}",
        secondText: "{{ 'datetime_jquery.secondText'|trans({}, translation_domain)|raw }}",
        millisecText: "{{ 'datetime_jquery.millisecText'|trans({}, translation_domain)|raw }}",
        timezoneText: "{{ 'datetime_jquery.timezoneText'|trans({}, translation_domain)|raw }}",
        timeFormat: "{{ time_format }}",
        amNames: {{ 'datetime_jquery.amNames'|trans({}, translation_domain)|raw }},
        pmNames: {{ 'datetime_jquery.pmNames'|trans({}, translation_domain)|raw }},
        {% endif %}

        {% if show_timezone %}showTimezone: true,{% endif %}
        {% if not show_time %}showTime: false,{% endif %}
        {% if not step_hour != 1 %}stepHour: {{ step_hour|raw }},{% endif %}
        {% if not step_minute != 1 %}stepMinute: {{ step_minute|raw }},{% endif %}
        {% if not step_second != 1 %}stepSecond: {{ step_second|raw }},{% endif %}
        {% if not hour != 0 %}hour: {{ hour|raw }},{% endif %}
        {% if not minute != 0 %}minute: {{ minute|raw }},{% endif %}
        {% if not second != 0 %}second: {{ second|raw }},{% endif %}
        {% if not timezone != 0 %}timezone: {{ timezone|raw }},{% endif %}
        {% if not hour_min != 0 %}hourMin: {{ hour_min|raw }},{% endif %}
        {% if not minute_min != 0 %}minuteMin: {{ minute_min|raw }},{% endif %}
        {% if not second_min != 0 %}secondMin: {{ second_min|raw }},{% endif %}
        {% if not hour_max != 59 %}hourMax: {{ hour_max|raw }},{% endif %}
        {% if not minute_max != 59 %}minuteMax: {{ minute_max|raw }},{% endif %}
        {% if not second_max != 0 %}secondMax: {{ second_max|raw }},{% endif %}
        {% if not show_button_panel %}showButtonPanel: false,{% endif %}
        {% if min_date_time is not null %}minDateTime: {{ min_date_time|raw }},{% endif %}
        {% if max_date_time is not null %}maxDateTime: {{ max_date_time|raw }},{% endif %}

        showSecond: {{ with_seconds|raw }},
        timeOnly: {{ time_only|raw }},
        showTimepicker: {{ show_timepicker|raw }}
    } );
    </script>
    {% endasset %}
{% endif %}
{% endblock datetime_widget_content %}

{% block datetime_widget %}
{% spaceless %}
    {{ block('base_datetime_widget') }}
    {{ block('datetime_widget_content') }}
{% endspaceless %}
{% endblock datetime_widget %}

{% block date_widget %}
{% spaceless %}
	{{ block('base_date_widget') }}
	{{ block('datetime_widget_content') }}
{% endspaceless %}
{% endblock date_widget %}

{% block time_widget %}
{% spaceless %}
    {% set type = 'text' %}
    {{ block('base_time_widget') }}
    {{ block('datetime_widget_content') }}
{% endspaceless %}
{% endblock time_widget %}
